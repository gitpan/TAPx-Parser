#!/usr/bin/perl

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
  if 0;    # not running under some shell

use strict;
use warnings;

sub _print;
use Getopt::Long;

GetOptions(
    'v|verbose' => \my $VERBOSE,
    'lib'       => \my $LIB,
);

use TAPx::Parser;
use TAPx::Parser::Aggregator;
use TAPx::Parser::Source::Perl;

##############################################################################

=head1 NAME

tprove - Simple proof of concept for proving tests

=head1 USAGE

 tprove [ list of test files ]

=head1 DESCRIPTION

C<tprove> is not installed on your system unless you explicitly copy it
somewhere in your path.  The current incarnation B<must> be run in a directory
with both C<t/> and C<lib/> (i.e., the standard "root" level directory in
which CPAN style modules are developed).  This will probably change in the
future.  As noted, this is a proof of concept.

Note that massive amounts of code have been lifted directly from
C<Test::Harness::Straps>.

=head1 SWITCHES

Print all test lines:

 --verbose

Include C<lib/>

 --lib

=head1 CAVEATS

This is alpha code.  You've been warned.

=cut

use File::Find;
my @tests;
if (@ARGV) {
    @tests = @ARGV;
}
else {
    find( sub { -f && /\.t$/ && push @tests => $File::Find::name }, 't' );
}

my $aggregate = TAPx::Parser::Aggregator->new;
my $source    = TAPx::Parser::Source::Perl->new;
$source->switches('-Ilib') if $LIB;
foreach my $test (@tests) {
    if ( my $stream = $source->filename($test)->get_stream ) {
        my $parser = analyze_test( $test, $stream );
        $aggregate->add( $test, $parser );
    }
    else {
        my $error = $source->error;
        warn "Could not run ($test): $error";
        next;
    }
}

my ( $total, $passed, $failed, $errors ) = (
    $aggregate->total,
    scalar $aggregate->passed,
    scalar $aggregate->failed,
    scalar $aggregate->parse_errors,
);

print <<"END_SUMMARY";
Tests run:  $total
Passed:     $passed
Failed:     $failed
Errors:     $errors
END_SUMMARY

sub analyze_test {
    my ( $test, $stream ) = @_;

    my $parser = TAPx::Parser->new( { stream => $stream } );
    print "$test......";
    while ( defined (my $result = $parser->next) ) {
        _print $result->as_string, $/;
    }
    if ( !$parser->failed && !$parser->parse_errors ) {
        print "ok\n";
    }
    else {
        print "not ok.\n";
        if ( $parser->failed ) {
             print "Failed: @{[$parser->failed]}\n";
        }
        if ( $parser->parse_errors ) {
             print "Errors: @{[$parser->parse_errors]}\n";
        }
    }
    return $parser;
}

sub _print {
    return unless $VERBOSE;
    print @_;
}
